# -*- coding: utf-8 -*-
"""
Saúl Mercado Pedroza
Automatically generated by Colab.
"""

#Saúl Mercado Pedroza#
#Librerías#
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#Libs#
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.models import load_model
from tensorflow.keras.preprocessing import image

from google.colab import drive

drive.mount('/content/drive')

"""# Peprocesamiento"""

TrainImages = ImageDataGenerator(
    rescale= 1./255,
    shear_range= 0.2,
    zoom_range= 0.2,
    rotation_range= 20,
    horizontal_flip= True
)
TestImages = ImageDataGenerator(
    rescale = 1./255
)

trainSet = TrainImages.flow_from_directory(
    '/content/drive/MyDrive/Codigod/Dataset/train',
    target_size= (256,256),
    batch_size = 26,
    class_mode= 'binary'
    )

testSet = TrainImages.flow_from_directory(
    '/content/drive/MyDrive/Codigod/Dataset/test',
    target_size= (256,256),
    batch_size = 26,
    class_mode= 'binary'
    )

cnn = Sequential()

#Convolución
cnn.add(
    Conv2D(
        filters = 16,
        kernel_size= (3,3),
        activation='relu', #Subcapa RElu
        input_shape = (256,256,3)
        )
)
#Pooling
cnn.add(MaxPooling2D())#default queda en 2,2#

#Convolución
cnn.add(
    Conv2D(
        filters = 32,
        kernel_size= (3,3),
        activation='relu', #Subcapa RElu
        )
)
#Pooling
cnn.add(MaxPooling2D())

#Convolución
cnn.add(
    Conv2D(
        filters = 16,
        kernel_size= (3,3),
        activation='relu', #Subcapa RElu
        )
)
#Pooling
cnn.add(MaxPooling2D())

#Flatten
cnn.add(Flatten())

#Full conection
cnn.add(
    Dense(
        units = 128,
        activation='relu',
    )
)
cnn.add(Dropout(0.5))

#Salida
cnn.add(
    Dense(
        units = 1,
        activation = 'sigmoid'
    )
)

#Compile
cnn.compile(
    optimizer = 'adam',
    loss = "binary_crossentropy",
    metrics= ["accuracy"]
)

#Entrenamiento

hist = cnn.fit(
    trainSet,
    epochs = 4,
    steps_per_epoch=len(trainSet),
    validation_data= testSet,
    validation_steps= len(testSet)
)
#Total de entrenamientos = 2
#Total de epocas = 22

#Evaluar modelos#
test_loss, test_acc = cnn.evaluate(testSet)

#Plot de la variables loss vs val_loss#
fig = plt.figure()
plt.plot(hist.history['loss'], color= 'teal', label = 'Loss')
plt.plot(hist.history['val_loss'], color= 'orange', label = 'Val_loss')
fig.suptitle('Loss', fontsize = 20)
plt.legend(loc = "upper left")
plt.show()

#Guardar modelo#
cnn.save('/content/drive/MyDrive/Codigod/cnn_model.h5')

#Cargar modelo#
modelo = load_model ('/content/drive/MyDrive/Codigod/cnn_model.h5')

from keras.utils import plot_model
plot_model(modelo, to_file='/content/drive/MyDrive/Codigod/cnn_model.png',
           show_shapes = True,
           show_layer_activations= True,
           show_layer_names= True)

import cv2
import os

# Realizar la predicción
# Directorio que contiene las imágenes a predecir
image_path = '/content/drive/MyDrive/Codigod/Dataset/classificate/1020_left.jpg'

# Lista para almacenar los resultados
predictions = []

def predict_image(image_path):
    # Cargar la imagen
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (256, 256))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)

    # Predicción
    predictions = modelo.predict(img)
    predictions = predictions[0]  # Obtener las probabilidades del primer (y único) elemento del batch

    # Formatear la salida
    class_labels = ['Cataratas', 'Glaucoma']  # Asegúrate de que esto coincida con cómo entrenaste tu modelo
    results = {class_labels[i]: f"{predictions[i] * 100:.2f}%" for i in range(len(predictions))}

    return results

result = predict_image(image_path)
print(result)